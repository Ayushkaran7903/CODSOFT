import pandas as pd

from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestRegressor

from sklearn.metrics import mean_absolute_error, r2_score

from sklearn.preprocessing import OneHotEncoder

from sklearn.compose import ColumnTransformer

from sklearn.pipeline import Pipeline

from sklearn.impute import SimpleImputer

import re



DATA_FILE = 'IMDb Movies India.csv'

TARGET_VARIABLE = 'Rating'



CATEGORICAL_FEATURES = ['Genre', 'Director', 'Actor 1']

NUMERICAL_FEATURES = ['Year', 'Duration', 'Votes']



def load_and_clean_data(filepath):

    """

    Loads and performs initial cleaning on the IMDb dataset.

    """

    try:

        data = pd.read_csv(filepath, encoding='latin1')

    except FileNotFoundError:

        print(f"Error: The file '{filepath}' was not found.")

        return None

    except Exception as e:

        print(f"Error loading data: {e}")

        return None



    print(f"Successfully loaded '{filepath}'. Original shape: {data.shape}")



    core_features = [TARGET_VARIABLE] + CATEGORICAL_FEATURES + NUMERICAL_FEATURES

    data = data.dropna(subset=core_features)

    print(f"Shape after dropping NaNs in core features: {data.shape}")



    data['Year'] = data['Year'].astype(str).str.extract(r'(\d{4})').astype(float)

    

    data['Duration'] = data['Duration'].astype(str).str.replace(' min', '').astype(float)

    

    data['Votes'] = data['Votes'].astype(str).str.replace(',', '').astype(float)



    data['Genre'] = data['Genre'].astype(str).apply(lambda x: x.split(',')[0].strip())



    data = data.dropna(subset=core_features)

    print(f"Shape after cleaning non-numeric values: {data.shape}\n")

    

    return data



def build_preprocessing_pipeline():

    """

    Creates a preprocessing pipeline for numerical and categorical features.

    """

    

    numerical_transformer = SimpleImputer(strategy='median')

    

    categorical_transformer = Pipeline(steps=[

        ('imputer', SimpleImputer(strategy='most_frequent')),

        ('onehot', OneHotEncoder(handle_unknown='ignore', max_categories=15))

    ])

    

    preprocessor = ColumnTransformer(

        transformers=[

            ('num', numerical_transformer, NUMERICAL_FEATURES),

            ('cat', categorical_transformer, CATEGORICAL_FEATURES)

        ],

        remainder='drop'

    )

    

    return preprocessor



def main():

    """Main function to run the data loading, preprocessing, training, and evaluation."""

    

    data = load_and_clean_data(DATA_FILE)

    if data is None or data.empty:

        print("Data loading or cleaning failed. Exiting.")

        return



    try:

        X = data[NUMERICAL_FEATURES + CATEGORICAL_FEATURES]

        y = data[TARGET_VARIABLE]

    except KeyError as e:

        print(f"Error: Missing expected column - {e}.")

        return



    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    

    print(f"Data split into {len(X_train)} training samples and {len(X_test)} testing samples.\n")



    preprocessor = build_preprocessing_pipeline()

    

    model_pipeline = Pipeline(steps=[

        ('preprocessor', preprocessor),

        ('regressor', RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1))

    ])

    

    print("Training the Random Forest Regressor model...")

    model_pipeline.fit(X_train, y_train)

    print("Model training complete.\n")

    

    print("Evaluating model performance on the test set...")

    y_pred = model_pipeline.predict(X_test)

    

    mae = mean_absolute_error(y_test, y_pred)

    r2 = r2_score(y_test, y_pred)

    

    print(f"--- Model Evaluation Results ---")

    print(f"R-squared (R2): {r2:.4f}")

    print(f"Mean Absolute Error (MAE): {mae:.4f}")

    

    print("\n--- Interpretation ---")

    print(f"R-squared (R2) of {r2*100:.2f}% means the model explains that much of the variance in movie ratings.")

    print(f"An MAE of {mae:.4f} means that, on average, the model's prediction is {mae:.4f} points off the actual movie rating (on a 1-10 scale).")



if _name_ == "_main_":

    main()
